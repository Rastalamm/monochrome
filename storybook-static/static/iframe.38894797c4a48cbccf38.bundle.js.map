{"version":3,"file":"static/iframe.38894797c4a48cbccf38.bundle.js","sources":["webpack:///./src/shared/draggable/index.js"],"sourcesContent":["import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from '@emotion/styled';\nimport {evaluateStyle} from '../theme';\n\nconst ContainerComponent = styled.div(props => ({\n  margin: -props.tolerance,\n  padding: props.tolerance,\n  cursor: props.isActive ? 'grabbing' : props.isEnabled ? 'grab' : 'inherit',\n\n  ...evaluateStyle(props.userStyle, props)\n}));\n\nconst BACKDROP_STYLES = {\n  position: 'fixed',\n  zIndex: 999,\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%'\n};\n\nfunction noop() {}\n\n/**\n * @class\n */\nexport default class Draggable extends PureComponent {\n  static propTypes = {\n    // container\n    className: PropTypes.string,\n    // config\n    style: PropTypes.object,\n    tolerance: PropTypes.number,\n    isEnabled: PropTypes.bool,\n    // callbacks\n    onDragStart: PropTypes.func,\n    onDrag: PropTypes.func,\n    onDragEnd: PropTypes.func\n  };\n\n  static defaultProps = {\n    className: '',\n    isEnabled: true,\n    tolerance: 0,\n    onDragStart: noop,\n    onDrag: noop,\n    onDragEnd: noop\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMouseDown: false,\n      dragStartPos: null,\n      hasDragged: false\n    };\n  }\n\n  _getEventData = (evt, offset = this.state.offset) => {\n    const {dragStartPos, hasDragged} = this.state;\n    const result = {\n      srcEvent: evt,\n      x: evt.clientX,\n      y: evt.clientY,\n      offsetX: evt.clientX - offset.left,\n      offsetY: evt.clientY - offset.top,\n      hasDragged\n    };\n    if (dragStartPos) {\n      result.deltaX = result.x - dragStartPos.x;\n      result.deltaY = result.y - dragStartPos.y;\n    } else {\n      result.deltaX = 0;\n      result.deltaY = 0;\n    }\n    return result;\n  };\n\n  _onMouseDown = evt => {\n    if (!this.props.isEnabled) {\n      return;\n    }\n    evt.stopPropagation();\n\n    const offset = this._element.getBoundingClientRect();\n    const eventData = this._getEventData(evt, offset);\n\n    this.setState({\n      isMouseDown: true,\n      hasDragged: false,\n      offset,\n      dragStartPos: {x: eventData.x, y: eventData.y}\n    });\n    this.props.onDragStart(eventData);\n  };\n\n  _onMouseMove = evt => {\n    if (!this.props.isEnabled) {\n      return;\n    }\n    evt.stopPropagation();\n\n    if (this.state.isMouseDown) {\n      const eventData = this._getEventData(evt);\n      const {deltaX, deltaY} = eventData;\n\n      if (!this.state.hasDragged) {\n        if (deltaX || deltaY) {\n          this.setState({hasDragged: true});\n        } else {\n          return;\n        }\n      }\n      this.props.onDrag(eventData);\n    }\n  };\n\n  _onMouseUp = evt => {\n    if (this.state.isMouseDown) {\n      this.setState({\n        isMouseDown: false,\n        dragStartPos: null\n      });\n      this.props.onDragEnd(this._getEventData(evt));\n    }\n  };\n\n  render() {\n    const {style, isEnabled, className, tolerance} = this.props;\n    const {isMouseDown} = this.state;\n\n    return (\n      <ContainerComponent\n        className={className}\n        ref={ref => {\n          this._element = ref;\n        }}\n        tolerance={tolerance}\n        isEnabled={isEnabled}\n        isActive={isMouseDown}\n        userStyle={style}\n        onMouseDown={this._onMouseDown}\n        onMouseMove={this._onMouseMove}\n        onMouseLeave={this._onMouseUp}\n        onMouseUp={this._onMouseUp}\n      >\n        {isMouseDown && <div style={BACKDROP_STYLES} />}\n\n        {this.props.children}\n      </ContainerComponent>\n    );\n  }\n}\n"],"mappings":"AAMA","sourceRoot":""}